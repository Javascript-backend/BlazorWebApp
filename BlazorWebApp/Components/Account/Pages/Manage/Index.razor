@page "/Account/manage"
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer


@inject UserManager<ApplicationUser> usermanager
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IServiceProvider ServiceProvider

<PageTitle>Details</PageTitle>

<div class="basic-info">
    <h2>Account Details</h2>
    <h5>Basic Info</h5>
    <EditForm FormName="basic-info" Model="basicInfoForm" OnValidSubmit="UpdateBasicInfo" method="post" novalidate>
         <DataAnnotationsValidator />

        @if(StatusMessage == "Succeeded")
        {
            <div class="alert alert-success" role="alert">
                 User was updated!
            </div>
         }
         else if(StatusMessage == "Error") {
        <div class="alert alert-danger" role="alert">
            Something went wrong!
        </div>
         }

        @if (userDetails == null)
        {
            <p>@StatusMessage</p>
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else
        {
            <div class="name">
                <div class="firstname">
                    <label>First name</label>
                    <InputText @bind-Value="userDetails.FirstName" />
                    <ValidationMessage For="@(() => basicInfoForm.FirstName)" />
                </div>
                <div class="lastname">
                    <label>Last name</label>
                    <InputText @bind-Value="userDetails.LastName" />
                    <ValidationMessage For="@(() => basicInfoForm.LastName)" />
                </div>
            </div>
            <div class="email-phone">

                <div class="email">

                    <label>Email address</label>
                    <InputText @bind-Value="userDetails.Email" />
                    <ValidationMessage For="@(() => basicInfoForm.Email)" />

                </div>
                <div class="phone">

                    <label>Phone</label>
                    <InputText @bind-Value="userDetails.PhoneNumber" />
                    <ValidationMessage For="@(() => basicInfoForm.PhoneNumber)" />

                </div>
            </div>

            <div class="bio">

                <label>Biography</label>
                <InputTextArea @bind-Value="userDetails.Biography" rows="4"> </InputTextArea>

            </div>

            <div class="buttons">
                <button id="cancel" class="btn-theme" type="reset"> Cancel</button>
                <button class="btn-theme" type="submit">Save changes </button>
            </div>
        }

    </EditForm>
</div>
<div class="address">
    <h5>Address</h5>
    <EditForm FormName="addressform" Model="addressForm" OnValidSubmit="UpdateAddressInfo" method="post" novalidate>

        <div class="Address-line-1">
            <div class="Address1">
                <label>Address line 1</label>
                <input>
                <span></span>
            </div>
        </div>
        <div class="Address-line-2">
            <div class="Address2">
                <label>Address line 2 (optional)</label>
                <input >
                <span ></span>
            </div>
        </div>

        <div class="Postal-code-city">
            <div class="postal-code">
                <label>Postal code</label>
                <input >
                <span></span>
            </div>
            <div class="city">
                <label>City</label>
                <input >
                <span ></span>
            </div>
        </div>

        <div class="buttons">
            <button id="cancel" class="btn-theme" type="reset">Cancel </button>
            <button class="btn-theme" type="submit">Save changes</button>
        </div>
    </EditForm>
</div>


@code {

    private ApplicationUser userDetails = new ApplicationUser();

    private ApplicationUser updateDetails = new ApplicationUser();

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;


    [SupplyParameterFromForm]
    public AddressForm addressForm { get; set; } = new();

    [SupplyParameterFromForm]
    public BasicInfoForm basicInfoForm { get; set; } = new();

    public string StatusMessage { get; set; } = "";


    private async Task UpdateAddressInfo(EditContext editContext)
    {

    }

    private async Task UpdateBasicInfo(EditContext editContext)
    {

        var user = (await AuthenticationState).User;

        if (user.Identity!.IsAuthenticated)
        {
            await using var scope = ServiceProvider.CreateAsyncScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            var usermanager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

            var userId = usermanager.GetUserId(user);
            updateDetails = await dbContext.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == userId);

            if (userDetails != null)
            {
                updateDetails.FirstName = userDetails.FirstName;
                updateDetails.LastName = userDetails.LastName;
                updateDetails.PhoneNumber = userDetails.PhoneNumber;
                updateDetails.Email = userDetails.Email;
                updateDetails.Biography = userDetails.Biography;

                var result = await usermanager.UpdateAsync(updateDetails);

                if (result.Succeeded)
                {
                    StatusMessage = "Succeeded";
                }
                else
                {
                    StatusMessage = "Error";
                }
            }

        }



    }


    protected override async Task OnInitializedAsync()
    {

        var user = (await AuthenticationState).User;

        if (user.Identity!.IsAuthenticated)
        {
            await using var scope = ServiceProvider.CreateAsyncScope();

            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            var usermanager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

            var userId = usermanager.GetUserId(user);
            userDetails = await dbContext.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == userId);

            if(userDetails != null)
            {

            }
        }


    }


    public class BasicInfoForm
    {
        [DataType(DataType.Text)]
        [Display(Name = "First name", Prompt = " Enter your first name", Order = 0)]
        public string FirstName { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "Last name", Prompt = " Enter your last name", Order = 1)]
        public string LastName { get; set; } = null!;

        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email-address", Prompt = " Enter your email-address", Order = 2)]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = null!;

        [DataType(DataType.PhoneNumber)]
        [Display(Name = "Password",  Order = 3)]
        public string PhoneNumber { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "Confirm password", Order = 4)]
        public string Biography { get; set; } = null!;

    };

    public class AddressForm
    {
        [DataType(DataType.Text)]
        [Display(Name = "First name",Order = 0)]
        public string AddressLine1 { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "Last name",Order = 1)]
        public string AddressLine2 { get; set; } = null!;
    };



}


 