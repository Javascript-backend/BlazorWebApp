@page "/Account/manage"
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@rendermode InteractiveServer
@attribute [StreamRendering]


@inject UserManager<ApplicationUser> usermanager
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IServiceProvider ServiceProvider
@inject IConfiguration _configuration

<PageTitle>Details</PageTitle>
@if (isLoading)
{
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>

}
else
{
    <section class="details">


        <div class="basic-info">
            <h2>Account Details</h2>
            <h5>Basic Info</h5>


            <EditForm FormName="basic-info" Model="basicInfoForm" OnValidSubmit="UpdateBasicInfo" method="post" novalidate>
                <DataAnnotationsValidator />

                @if (StatusMessage == "Succeeded")
                {
                    <div class="alert alert-success" role="alert">
                        User was updated!
                    </div>
                }
                else if (StatusMessage == "Error")
                {
                    <div class="alert alert-danger" role="alert">
                        Something went wrong!
                    </div>
                }

                @if (userDetails == null)
                {
                    <p>@StatusMessage</p>
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                }
                else
                {


                    <div class="name">
                        <div class="firstname">
                            <label>First name</label>
                            <InputText @bind-Value="userDetails.FirstName" />
                            <ValidationMessage For="@(() => basicInfoForm.FirstName)" />
                        </div>
                        <div class="lastname">
                            <label>Last name</label>
                            <InputText @bind-Value="userDetails.LastName" />
                            <ValidationMessage For="@(() => basicInfoForm.LastName)" />
                        </div>
                    </div>
                    <div class="email-phone">

                        <div class="email">

                            <label>Email address</label>
                            <InputText @bind-Value="userDetails.Email" />
                            <ValidationMessage For="@(() => basicInfoForm.Email)" />

                        </div>
                        <div class="phone">

                            <label>Phone</label>
                            <InputText @bind-Value="userDetails.PhoneNumber" />
                            <ValidationMessage For="@(() => basicInfoForm.PhoneNumber)" />

                        </div>
                    </div>

                    <div class="bio">

                        <label>Biography</label>
                        <InputTextArea @bind-Value="userDetails.Biography" rows="4"> </InputTextArea>

                    </div>

                    <div class="buttons">
                        <button id="cancel" class="btn-theme" type="reset"> Cancel</button>
                        <button class="btn-theme" type="submit">Save changes </button>
                    </div>


                }

            </EditForm>
        </div>
        <div class="address">
            @if (responseMessage == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            }
            else
            {

                <h5>Address</h5>
                <EditForm FormName="addressform" Model="addressForm" OnValidSubmit="UpdateAddressInfo" method="post" novalidate>
                    <DataAnnotationsValidator />
                    @if (AddressStatusMessage == "Succeeded")
                    {
                        <div class="alert alert-success" role="alert">
                            Address was updated!
                        </div>
                    }
                    else if (AddressStatusMessage == "Error")
                    {
                        <div class="alert alert-danger" role="alert">
                            Something went wrong!
                        </div>
                    }
                    <div class="Address-line-1">
                        <div class="Address1">
                            <label>Address line 1</label>
                            <InputText @bind-Value="addressForm.AddressLine_1" />
                            <ValidationMessage For="@(() => addressForm.AddressLine_1)" />
                        </div>
                    </div>
                    <div class="Address-line-2">
                        <div class="Address2">
                            <label>Address line 2 (optional)</label>
                            <InputText @bind-Value="addressForm.AddressLine_2" />
                        </div>
                    </div>

                    <div class="Postal-code-city">
                        <div class="postal-code">
                            <label>Postal code</label>
                            <InputText @bind-Value="addressForm.PostalCode" />
                            <ValidationMessage For="@(() => addressForm.PostalCode)" />
                        </div>
                        <div class="city">
                            <label>City</label>
                            <InputText @bind-Value="addressForm.City" />
                            <ValidationMessage For="@(() => addressForm.City)" />
                        </div>
                    </div>

                    <div class="buttons">
                        <button id="cancel" class="btn-theme" type="reset">Cancel </button>
                        <button class="btn-theme" type="submit">Save changes</button>
                    </div>
                </EditForm>


            }

        </div>




    </section>
}




@code {

    private ApplicationUser userDetails = new ApplicationUser();

    private ApplicationUser updateDetails = new ApplicationUser();

    private AddressRequest addressRequest = new AddressRequest();

    private HttpResponseMessage responseMessage = new HttpResponseMessage();

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;


    [SupplyParameterFromForm]
    public AddressForm addressForm { get; set; } = new();

    [SupplyParameterFromForm]
    public BasicInfoForm basicInfoForm { get; set; } = new();

    public string StatusMessage { get; set; } = "";

    public string AddressStatusMessage { get; set; } = "";

    private bool isLoading = true;


    private async Task UpdateAddressInfo(EditContext editContext)
    {
        var user = (await AuthenticationState).User;

        if (user.Identity!.IsAuthenticated)
        {
            await using var scope = ServiceProvider.CreateAsyncScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            var usermanager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

            var userId = usermanager.GetUserId(user);
            if(userId != null)
            {
                addressForm.UserId = userId;

                responseMessage = await Http.PostAsJsonAsync($"https://accountprovider-silicon.azurewebsites.net/api/UpdateAddress?code={_configuration["ApiKeyUpdateAddress"]}", addressForm);

                if (responseMessage.IsSuccessStatusCode)
                {

                    var address = await responseMessage.Content.ReadAsStringAsync();
                    addressForm = JsonConvert.DeserializeObject<AddressForm>(address)!;

                    AddressStatusMessage = "Succeeded";
                }
                else
                {
                    AddressStatusMessage = "Error";
                }
            }
        }
    }



    private async Task UpdateBasicInfo(EditContext editContext)
    {

        var user = (await AuthenticationState).User;

        if (user.Identity!.IsAuthenticated)
        {
            await using var scope = ServiceProvider.CreateAsyncScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            var usermanager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

            var userId = usermanager.GetUserId(user);
            if(userId != null)
            {
                updateDetails = await dbContext.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == userId);

                if (userDetails != null)
                {
                    updateDetails.FirstName = userDetails.FirstName;
                    updateDetails.LastName = userDetails.LastName;
                    updateDetails.PhoneNumber = userDetails.PhoneNumber;
                    updateDetails.Email = userDetails.Email;
                    updateDetails.Biography = userDetails.Biography;

                    var result = await usermanager.UpdateAsync(updateDetails);

                    if (result.Succeeded)
                    {
                        StatusMessage = "Succeeded";
                    }
                    else
                    {
                        StatusMessage = "Error";
                    }
                }
            }


        }



    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = (await AuthenticationState).User;

            if (user.Identity!.IsAuthenticated)
            {
                await using var scope = ServiceProvider.CreateAsyncScope();

                var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

                var usermanager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

                var userId = usermanager.GetUserId(user);
                if (userId != null)
                {
                    userDetails = await dbContext.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == userId);
                    addressRequest.UserId = userId;

                    var result = await Http.PostAsJsonAsync($"https://accountprovider-silicon.azurewebsites.net/api/GetAddress?code={_configuration["ApiKeyGetAddress"]}", addressRequest);

                    if (result.IsSuccessStatusCode)
                    {
                        var address = await result.Content.ReadAsStringAsync();
                        addressForm = JsonConvert.DeserializeObject<AddressForm>(address)!;
                    }
                }

            }

        }
        finally
        {
            isLoading = false;
        }
       

    }

    public class AddressRequest
    {
        public string UserId { get; set; } = null!;
    }

    public class BasicInfoForm
    {
        [DataType(DataType.Text)]
        [Display(Name = "First name", Prompt = " Enter your first name", Order = 0)]
        public string FirstName { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "Last name", Prompt = " Enter your last name", Order = 1)]
        public string LastName { get; set; } = null!;

        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email-address", Prompt = " Enter your email-address", Order = 2)]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = null!;

        [DataType(DataType.PhoneNumber)]
        [Display(Name = "Password",  Order = 3)]
        public string PhoneNumber { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "Confirm password", Order = 4)]
        public string Biography { get; set; } = null!;

    };

    public class AddressForm
    {

        public string? UserId { get; set; }

        [Display(Name = "Address line 1")]
        [DataType(DataType.Text)]
        [Required(ErrorMessage = "Address is required")]
        public string AddressLine_1 { get; set; } = null!;


        [Display(Name = "Address line 2 (optional)", Order = 1)]
        [DataType(DataType.Text)]
        public string? AddressLine_2 { get; set; }


        [Display(Name = "Postal code")]
        [DataType(DataType.PostalCode)]
        [Required(ErrorMessage = "Postal code is required")]
        public string PostalCode { get; set; } = null!;


        [Display(Name = "City")]
        [Required(ErrorMessage = "City is required")]
        public string City { get; set; } = null!;
    };



}


 