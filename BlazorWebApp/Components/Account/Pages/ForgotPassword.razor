@page "/Account/ForgotPassword"

@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Azure.Messaging.ServiceBus
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorWebApp.Data
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IServiceProvider ServiceProvider

@inject IConfiguration _configuration

<PageTitle>Forgot your password?</PageTitle>

<section class="forgot-password">

    @if(SubmitBox)
    {
        <div class="submitCodeBox">
            <div class="title">
                <h1>An verification code has been sent to your email address!</h1>

                <h4>Enter verification code!</h4>
            </div>

            <EditForm Model="submitCodeForm" FormName="submitcode" OnValidSubmit="SubmitCode" method="post" novalidate>
                <DataAnnotationsValidator />
                <div class="code">
                    <InputText @bind-Value="submitCodeForm.Code" />
                    <ValidationMessage For="@(() => Input.Email)" />
                </div>

                <button class="btn-theme" type="submit">Verify Code</button>

            </EditForm>

            @if (StatusMessage == "Error")
            {
                <p>Failed to verify code.</p>
            }

        </div>
    }


    <h1>Forgot your password?</h1>
    <h2>Enter your email.</h2>
    <hr />
    <div class="row">
        <div >
            <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post" novalidate>
                <DataAnnotationsValidator />
                @if (StatusMessage == "Dontexist")
                {
                    <div class="alert alert-danger" role="alert">
                        A user with that email address does not exists
                    </div>
                }

.

                <div class="code">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <ValidationMessage For="@(() => Input.Email)" />
                </div>
                <button type="submit" class="btn-theme">Reset password</button>
            </EditForm>
        </div>
    </div>

</section>



@code {

    public SubmitCodeForm submitCodeForm { get; set; } = new();

    [SupplyParameterFromForm]
    public InputModel Input { get; set; } = new();

    public string Email = "";


    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    public string StatusMessage = "";


    public bool SubmitBox = false;

    private async Task OnValidSubmitAsync(EditContext editContext)
    {
        await using var scope = ServiceProvider.CreateAsyncScope();

        var usermanager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

        var exists = await usermanager.FindByEmailAsync(Input.Email);

        if (exists != null)
        {

            Email = exists.Email!;

            ServiceBusClient client = new ServiceBusClient(_configuration["ServiceBusConnection"]);
            ServiceBusSender sender = client.CreateSender(_configuration["VerificationQueue"]);


            var messageBody = JsonConvert.SerializeObject(new { Email = Input.Email });
            ServiceBusMessage message = new ServiceBusMessage(messageBody);

            await sender.SendMessageAsync(message);


            SubmitBox = true;
        }
        else
        {
            StatusMessage = "Dontexist";
        }


    }

    private async Task SubmitCode(EditContext editContext)
    {

        submitCodeForm.Email = Input.Email;


        var result = await Http.PostAsJsonAsync($"https://accountprovider-silicon.azurewebsites.net/api/Verify?code={_configuration["ApiKeyVerify"]}", submitCodeForm);

        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/Account/ResetPassword");

        }
        else
        {
            StatusMessage = "Error";
        }

    }


    public  class InputModel
    {
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; } = null!;
    }

    public class SubmitCodeForm
    {
        public string Email { get; set; } = null!;

        [Required(ErrorMessage = "You must provide a code!")]
        public string Code { get; set; } = null!;
    }
}
