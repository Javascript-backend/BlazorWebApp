@page "/Courses"
@using BlazorWebApp.Models
@using GraphQL
@using GraphQL.Client
@using GraphQL.Client.Http
@using GraphQL.Client.Abstractions
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
<PageTitle>Courses</PageTitle>

@* asdasd *@
@attribute [Authorize]
<section id="courses">
    <div class="container">
        <div class="categories">
            <i class="fa-light fa-house"></i>
            <a href="/" >Home</a>
            <i class="fa-light fa-arrow-right"></i>
            <NavLink href="/Courses">Courses</NavLink>
        </div>
        <div class="title-input-field">
            <h1>Courses</h1>
            <div class="inputs">
                <form class="filters">

                    <div class="select">
                        <div class="selected">All categories</div>
                        <div class="select-options">
                            <div class="option" data-value="all">All categories</div>

                        </div>
                    </div>

                    <div class="input-search-group">
                        <input id="searchQuery" name="searchQuery" placeholder="Search courses" />
                        <i class="fa-regular fa-search"></i>
                    </div>
                </form>
            </div>
        </div>

        <div class="articles">

            @if (courses != null)
            {
                @foreach (var course in courses)
                {
                    <div class="article" onclick="location.href='/courses/@course.Id'">
                        @if (course.IsBestSeller)
                        {
                            <div class="best-seller">Best seller</div>
                        }


                        <a href="#" class="not-saved"><i class="fa-regular fa-bookmark"></i></a>

                        <img src="@course.ImageUri" alt="">
                        <div class="article-content">
                            <h5>@course.Title</h5>
                            <p>By @course.Authors?.FirstOrDefault()?.Name</p>
                            <div class="price">
                                @if (course.Prices.Discount <= 0)
                                {
                                    <div>$ @course.Prices.Price</div>
                                }
                                else
                                {
                                    <div>$ @course.Prices.Discount</div>
                                    <div class="sale">Sale price</div>
                                    <s><p>$ @course.Prices.Price</p></s>
                                }



                            </div>
                            <div class="hours-likes">
                                <div class="hours">
                                    <i class="fa-duotone fa-timer"></i>
                                    <p>@course.Hours hours</p>
                                </div>
                                <div class="likes">
                                    <i class="fa-light fa-thumbs-up"></i>
                                    <p>@course.LikesInPercent % (@course.Likes)</p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            
        </div>

    </div>

</section>

<section id="get-started">
    <div class="container">
        <div class="section-title">
            <div class="text-lead">Ready to get started?</div>
            <h1>Take Your <p>Skills</p>to the Next Level</h1>
            <a class="btn-theme " href="">Work with us</a>
        </div>
        <img src="/images/background/illustration.svg" alt="">
    </div>
</section>

@code {
    private List<CourseCardModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new
        {
            query = "{ getAllCourses { id title isBestSeller isDigital categories imageUri authors { name } prices { price discount } hours likes likesInPercent } }"
        };

        var response = await Http.PostAsJsonAsync("https://gbgcourseprovider.azurewebsites.net/api/graphql?code=uAMkjucuAPkVqyLMmbal_N8rxyPXJslqzzde7JdZTWIKAzFuhtmdNA%3D%3D", query);
        var jsonString = await response.Content.ReadAsStringAsync();
        var jsonResponse = JsonDocument.Parse(jsonString);

        courses = JsonSerializer.Deserialize<List<CourseCardModel>>(
            jsonResponse.RootElement.GetProperty("data").GetProperty("getAllCourses").ToString(),
            new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
        );
    }
}