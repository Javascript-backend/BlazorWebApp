@page "/Courses"
@using BlazorWebApp.Models
@using GraphQL
@using GraphQL.Client
@using GraphQL.Client.Http
@using GraphQL.Client.Abstractions
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore


@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IServiceProvider ServiceProvider
@inject IConfiguration _configuration



@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize]
<PageTitle>Courses</PageTitle>


<section id="courses">
    <div class="container">
        <div class="categories">
            <i class="fa-light fa-house"></i>
            <a href="/" >Home</a>
            <i class="fa-light fa-arrow-right"></i>
            <NavLink href="/Courses">Courses</NavLink>
        </div>
        <div class="title-input-field">
            <h1>Courses</h1>
            <div class="inputs">
                <select @bind="selectedCategory" name="categories" @bind:event="onchange" required @bind:after="FilterCourses">
                    <option value="">All categories</option>
                    @if (categories != null)
                    {
                        @foreach (var category in categories)
                        {
                            <option value="@category">@category</option>
                        }
                    }
                </select>
                <input placeholder="Search courses" @bind="searchText" @bind:event="oninput" @bind:after="FilterCourses" />
                <i class="fa-solid fa-magnifying-glass"></i>
            </div>
        </div>
        @if (StatusMessage == "Success")
        {
            <div class="alert alert-success" role="alert">
                Course was saved!
            </div>
        }
        else if (StatusMessage == "removed")
        {
            <div class="alert alert-warning" role="alert">
                Course was removed
            </div>
        }
        else if (StatusMessage == "Error")
        {
            <div class="alert alert-danger" role="alert">
                Something went wrong!
            </div>
        }

        <div class="articles">


                @if(filteredCourses != null) {

                    @foreach (var course in filteredCourses)
                     {
                             <div class="article" onclick="location.href='@($"SingleCourse?id={course.Id}")'">
                                @if (course.IsBestSeller)
                                {
                                    <div class="best-seller">Best seller</div>
                                }


                                <EditForm Model="new SaveCourseModel { UserId = user.Id, CourseId = course.Id, Name = FullName, Email = user.Email, Title = course.Title }" OnValidSubmit="() => SaveCourse(new SaveCourseModel { UserId = user.Id, CourseId = course.Id, Name = FullName, Email = user.Email, Title = course.Title })">
                                    @if (savedCourses != null && savedCourses.Any(saved => saved.CourseId == course.Id))
                                    {
                                        <button class="saved" onclick="event.stopPropagation()" type="submit"><i class="fa-regular fa-bookmark"></i></button>
                                    }
                                    else
                                    {
                                        <button class="not-saved" onclick="event.stopPropagation()" type="submit"><i class="fa-regular fa-bookmark"></i></button>
                                    }
                                </EditForm>
                          
                                <img src="@course.ImageUri" alt="">
                                <div class="article-content">
                                    <h5>@course.Title</h5>
                                    <p>By @course.Authors?.FirstOrDefault()?.Name</p>
                                    <div class="price">

                                        @if (course.Prices.Discount <= 0)
                                        {
                                            <div>$ @course.Prices.Price</div>
                                        }
                                        else
                                        {
                                            <div class="sale">$ @course.Prices.Discount</div>

                                            <s><p>$ @course.Prices.Price</p></s>
                                        }
                                    </div>
                                    <div class="hours-likes">
                                        <div class="hours">
                                            <i class="fa-duotone fa-timer"></i>
                                            <p>@course.Hours hours</p>
                                        </div>
                                        <div class="likes">
                                            <i class="fa-light fa-thumbs-up"></i>
                                            <p>@course.LikesInPercent % (@course.Likes)</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                }
            }
            else
            {
                 <div class="spinner">
                    <div class="spinner-border" role="status">
                        <span class="sr-only"></span>
                    </div>
                 </div>

            }

        </div>

    </div>

</section>

<section id="get-started">
    <div class="container">
        <div class="section-title">
            <div class="text-lead">Ready to get started?</div>
            <h1>Take Your <p>Skills</p>to the Next Level</h1>
            <a class="btn-theme " href="">Work with us</a>
        </div>
        <img src="/images/background/illustration.svg" alt="">
    </div>
</section>

@code {
    private List<CourseCardModel>? courses;

    private List<CoursesSaved>? savedCourses;

    private List<CourseCardModel>? filteredCourses;

    private List<string>? categories;

    private string selectedCategory = string.Empty;

    private string searchText = string.Empty;

    private string FullName = "";

    private ApplicationUser user = new ApplicationUser();

    public SaveCourseModel saveCourse = new SaveCourseModel();


    public string StatusMessage { get; set; } = "";

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {

        var userClaims = (await AuthenticationState).User;

        if (userClaims.Identity!.IsAuthenticated)
        {
            await using var scope = ServiceProvider.CreateAsyncScope();

            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            var usermanager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

            var userId = usermanager.GetUserId(userClaims);
            if (userId != null)
            {
                user = await dbContext.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == userId);

                FullName = $"{user.FirstName} {user.LastName}";
            }
        }

        SavedCourseRequest request = new SavedCourseRequest { UserId = user.Id };

        var savedResponse = await Http.PostAsJsonAsync($"https://savecourseprovider-silicon-cl.azurewebsites.net/api/GetSavedCourse?code={_configuration["ApiKeyGetSavedCourses"]}", request);

        if(savedResponse.IsSuccessStatusCode)
        {
            savedCourses = await savedResponse.Content.ReadFromJsonAsync<List<CoursesSaved>>();


        }

        var query = new
        {
            query = "{ getAllCourses { id title isBestSeller isDigital categories imageUri authors { name } prices { price discount } hours likes likesInPercent } }"
        };

        var response = await Http.PostAsJsonAsync("https://gbgcourseprovider.azurewebsites.net/api/graphql?code=uAMkjucuAPkVqyLMmbal_N8rxyPXJslqzzde7JdZTWIKAzFuhtmdNA%3D%3D", query);
        var jsonString = await response.Content.ReadAsStringAsync();
        var jsonResponse = JsonDocument.Parse(jsonString);

        courses = JsonSerializer.Deserialize<List<CourseCardModel>>(
            jsonResponse.RootElement.GetProperty("data").GetProperty("getAllCourses").ToString(),
            new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
        );

        categories = courses?
         .SelectMany(course => course.Categories ?? Enumerable.Empty<string>())
         .Distinct()
         .ToList();


        FilterCourses();
    }






    private void FilterCourses()
    {
        if (string.IsNullOrWhiteSpace(searchText) && string.IsNullOrWhiteSpace(selectedCategory))
        {
            filteredCourses = courses;
            return;
        }
        else
        {
            filteredCourses = courses.Where(c =>
                (string.IsNullOrWhiteSpace(searchText) || c.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(selectedCategory) || (c.Categories != null && c.Categories.Contains(selectedCategory)))
            ).ToList();
        }
    }



    public async Task SaveCourse(SaveCourseModel model)
    {


        var response = await Http.PostAsJsonAsync($"https://savecourseprovider-silicon-cl.azurewebsites.net/api/SaveCourse?code={_configuration["ApiKeySaveCourse"]}", model);

        if(response.IsSuccessStatusCode)
        {

            var responseBody = await response.Content.ReadAsStringAsync();
            if (responseBody == "removed")
            {
                
                StatusMessage = "removed";
            }
            else
            {
                
                StatusMessage = "Success";
            }
        }
        else
        {
            StatusMessage = "Error";
        }

    }
}