@page "/SingleCourse"
@using System.Text.Json
@using BlazorWebApp.Models
@using Microsoft.EntityFrameworkCore

@inject IServiceProvider ServiceProvider
@inject IConfiguration _configuration

@rendermode InteractiveServer


<section id="single-course-showcase">
    <img class="background-image" src="/images/background/single_course_background.svg" alt="">
    <div class="container">
        <div class="categories">
            <i class="fa-light fa-house"></i>
            <a asp-controller="Home" asp-action="Index">Home</a>
            <i class="fa-light fa-arrow-right"></i>
            <a href="courses.html">Courses</a>
            <i class="fa-light fa-arrow-right"></i>
            <a class="active">@course.Title</a>
        </div>
        <div class="section-title">
            <div class="tags">
                @if (course.IsBestSeller)
                {
                    <div class="tag1">Best seller</div>
                }
                @if (course.IsDigital)
                {
                    <div class="tag2">Digital</div>
                }
            </div>
            <h1>@course.Title</h1>
            <div class="text-lg">Egestas feugiat lorem eu neque suspendisse ullamcorper scelerisque aliquam mauris.</div>
            <div class="reviews-hours-likes">
                <img src="/images/icons/rating.svg" alt="">
                <p>@course.Reviews</p>
                <i class="fa-light fa-thumbs-up"></i>
                <p>@course.Likes likes</p>
                <i class="fa-duotone fa-timer"></i>
                <p>@course.Hours hours</p>
            </div>
        </div>
        <div class="profile">
            <img src="/images/profile/profile_1.svg" alt="">
            <div class="text">
                <p class="author">Created by</p>
                <p>@course.Authors?.FirstOrDefault()?.Name</p>
            </div>
        </div>
    </div>
</section>

<section id="course-description">
    <div class="container">
        @if (StatusMessage == "Success")
        {
            <div class="alert alert-success" role="alert">
                Course was saved!
            </div>
        }
        else if (StatusMessage == "removed")
        {
            <div class="alert alert-warning" role="alert">
                Course was removed
            </div>
        }
        else if (StatusMessage == "Error")
        {
            <div class="alert alert-danger" role="alert">
                Something went wrong!
            </div>
        }
        <div class="description">

            <div class="section-title">
                <h1>Course Description</h1>
                <p>@course.Content?.Description</p>
                <div class="learn">
                    <h3>What you'll learn</h3>
                    <p><i class="fa-regular fa-circle-check"></i>Sed lectus donec amet eu turpis interdum.</p>
                    <p><i class="fa-regular fa-circle-check"></i>Nulla at consectetur vitae dignissim porttitor.</p>
                    <p><i class="fa-regular fa-circle-check"></i>Phasellus id vitae dui aliquet mi.</p>
                    <p><i class="fa-regular fa-circle-check"></i>Integer cursus vitae, odio feugiat iaculis aliquet diam, et purus.</p>
                    <p><i class="fa-regular fa-circle-check"></i>In aenean dolor diam tortor orci eu.</p>
                </div>
            </div>
            <div class="includes-box">
                <h4>This course includes:</h4>
                <p><i class="fa-solid fa-video"></i>Model hours on-demand video</p>
                <p><i class="fa-solid fa-download"></i>25 downloadable resources</p>
                <p><i class="fa-solid fa-infinity"></i>Full lifetime access</p>
                <p><i class="fa-solid fa-trophy"></i>Certificate of completion</p>
                <p><i class="fa-solid fa-newspaper"></i>18 articles</p>
                <div class="price">
                    @if (course.Prices != null)
                    {
                        @if (course.Prices.Discount <= 0)
                        {
                            <div>$ @course.Prices.Price</div>
                        }
                        else
                        {
                            <div>$ @course.Prices.Discount</div>
                            <div class="sale">Sale price</div>
                            <s><p>$ @course.Prices.Price</p></s>
                        }
                    }
                </div>
                <button @onclick="() => SaveCourse(new SaveCourseModel { UserId = user.Id, CourseId = course.Id, Name = FullName, Email = user.Email, Title = course.Title })" class="btn-theme" >Join course</button>
            </div>
        </div>
        <div class="program-details">
            <h1>Program Details</h1>
            <div class="steps">
                @foreach (var detail in course.Content?.ProgramDetails ?? new List<ProgramDetailItem>())
                {
                    <div class="step">
                        <img src="/images/icons/@($"{detail.Id}.svg")" alt="">
                        <div class="text">
                            <h4>@detail.Title</h4>
                            <p>@detail.Description</p>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="author">
            <img src="/images/profile/author.svg" alt="">
            <div class="section-title">
                <img class="background" src="/images/background/pattern.svg" alt="">
                <div class="text">
                    <h5>Learn from the best</h5>
                    <h1>Author</h1>
                    <p>@course.Authors?.FirstOrDefault()?.Name</p>
                    <div class="buttons">
                        <a class="btn-theme youtube" href=""><i class="fa-brands fa-youtube"></i>240k subscribers</a>
                        <a class="btn-theme twitter" href=""><i class="fa-brands fa-twitter"></i>180k followers</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>



@code {

    [SupplyParameterFromQuery]
    private string? Id { get; set; }

    private string StatusMessage = "";

    private string FullName = "";

    private ApplicationUser user = new ApplicationUser();

    public FullCourseModel course = new FullCourseModel();

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var userClaims = (await AuthenticationState).User;

        if (userClaims.Identity!.IsAuthenticated)
        {
            await using var scope = ServiceProvider.CreateAsyncScope();

            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            var usermanager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

            var userId = usermanager.GetUserId(userClaims);
            if (userId != null)
            {
                user = await dbContext.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == userId);

                FullName = $"{user.FirstName} {user.LastName}";
            }
        }



        var query = new
        {
            query = $@"
                    {{
                    getCourseById(id: ""{Id}"") {{
                    id
                    imageUri
                    imageHeaderUri
                    isBestSeller
                    isDigital
                    categories
                    title
                    ingress
                    starRating
                    reviews
                    likesInPercent
                    likes
                    hours
                    authors {{

                        name

                    }}
                    prices {{
                        price
                        discount

                    }}
                    content {{
                        description
                        includes
                        programDetails {{
                        id
                        title
                        description
                        }}
                    }}
                    }}
                    }}"
        };

        var response = await Http.PostAsJsonAsync("https://gbgcourseprovider.azurewebsites.net/api/graphql?code=uAMkjucuAPkVqyLMmbal_N8rxyPXJslqzzde7JdZTWIKAzFuhtmdNA%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            var jsonResponse = JsonDocument.Parse(jsonString);

            course = JsonSerializer.Deserialize<FullCourseModel>(
                jsonResponse.RootElement.GetProperty("data").GetProperty("getCourseById").ToString(),
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
            );
        }
    }

    public async Task SaveCourse(SaveCourseModel model)
    {


        var response = await Http.PostAsJsonAsync($"https://savecourseprovider-silicon-cl.azurewebsites.net/api/SaveCourse?code={_configuration["ApiKeySaveCourse"]}", model);

        if (response.IsSuccessStatusCode)
        {

            var responseBody = await response.Content.ReadAsStringAsync();
            if (responseBody == "removed")
            {

                StatusMessage = "removed";
            }
            else
            {

                StatusMessage = "Success";
            }
        }
        else
        {
            StatusMessage = "Error";
        }

    }
}